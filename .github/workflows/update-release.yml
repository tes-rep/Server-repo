name: Update Releases Data

on:
  schedule:
   - cron: '0 */12 * * *'
  workflow_dispatch:
  push:
    branches: [ main, dev ]

jobs:
  update:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      actions: write
    steps:
      - uses: actions/checkout@v4
      
      - name: Update releases
        env:
          GITHUB_TOKEN: ${{ secrets.PERSONAL_GITHUB_TOKEN }}
        run: |
          echo "Finds releases Firmware..."
          
          # Fetch releases ke file temporary
          HTTP_CODE=$(curl -w "%{http_code}" -s -o temp_releases.json \
               -H "Authorization: token $GITHUB_TOKEN" \
               -H "Accept: application/vnd.github.v3+json" \
               -H "User-Agent: GitHub-Actions" \
               https://api.github.com/repos/de-quenx/XIDZs-WRT/releases)
          
          echo "HTTP Response: $HTTP_CODE"
          
          # Inisialisasi flag untuk update
          SHOULD_UPDATE=false
          
          if [ "$HTTP_CODE" = "200" ]; then
            # URL target ada dan berhasil
            if [ -s temp_releases.json ] && jq empty temp_releases.json >/dev/null 2>&1; then
              RELEASE_COUNT=$(jq 'length' temp_releases.json)
              echo "Target repo found with $RELEASE_COUNT releases"
              
              # Cek apakah releases.json sudah ada dan bandingkan
              if [ -f "releases.json" ]; then
                if ! cmp -s temp_releases.json releases.json; then
                  echo "Data has changed, will update releases.json"
                  mv temp_releases.json releases.json
                  SHOULD_UPDATE=true
                else
                  echo "No changes detected in releases data"
                  rm temp_releases.json
                fi
              else
                # File tidak ada, buat baru
                echo "releases.json not found, creating new file"
                mv temp_releases.json releases.json
                SHOULD_UPDATE=true
              fi
              
            else
              echo "Invalid JSON response from API"
              rm -f temp_releases.json
              # Jika releases.json belum ada atau bukan array kosong, update ke array kosong
              if [ ! -f "releases.json" ] || [ "$(jq -r 'type' releases.json 2>/dev/null)" != "array" ]; then
                echo '[]' > releases.json
                SHOULD_UPDATE=true
              fi
            fi
            
          elif [ "$HTTP_CODE" = "404" ]; then
            # Repository tidak ditemukan
            echo "Target repository not found (404)"
            rm -f temp_releases.json
            if [ ! -f "releases.json" ] || [ "$(jq 'length' releases.json 2>/dev/null || echo "-1")" != "0" ]; then
              echo '[]' > releases.json
              SHOULD_UPDATE=true
            fi
            
          else
            # Error lain (403, 500, rate limit, dll)
            echo "API request failed with code $HTTP_CODE"
            rm -f temp_releases.json
            # Untuk error lain, jangan ubah releases.json yang sudah ada
            # Kecuali jika file tidak ada sama sekali
            if [ ! -f "releases.json" ]; then
              echo '[]' > releases.json
              SHOULD_UPDATE=true
            else
              echo "Keeping existing releases.json due to API error"
            fi
          fi
          
          # Tampilkan hasil akhir
          FINAL_COUNT=$(jq 'length' releases.json 2>/dev/null || echo "unknown")
          echo "Final releases.json contains $FINAL_COUNT releases"
          
          # Set environment variable untuk step selanjutnya
          echo "SHOULD_UPDATE=$SHOULD_UPDATE" >> $GITHUB_ENV
        
      - name: Commit and push
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          
          # Hanya commit jika ada perubahan
          if [ "$SHOULD_UPDATE" = "true" ]; then
            git add releases.json
            # Double check apakah benar ada perubahan di git
            if ! git diff --staged --quiet; then
              RELEASE_COUNT=$(jq 'length' releases.json 2>/dev/null || echo "unknown")
              git commit -m "Update releases data ($RELEASE_COUNT releases) - $(date -u '+%Y-%m-%d %H:%M UTC')"
              git push
              echo "Changes committed and pushed successfully"
            else
              echo "No staged changes found, skipping commit"
            fi
          else
            echo "No update needed - data is identical to previous version"
          fi

      - name: Cleanup old workflows
        if: always()
        env:
          GITHUB_TOKEN: ${{ secrets.PERSONAL_GITHUB_TOKEN }}
        run: |
          echo "Cleaning up old workflow runs (keeping latest 2)..."
          
          # Get completed runs, skip first 2 (latest)
          curl -s -H "Authorization: token $GITHUB_TOKEN" \
               "https://api.github.com/repos/${{ github.repository }}/actions/runs?per_page=50&status=completed" | \
          jq -r '.workflow_runs[2:] | .[].id' | \
          head -10 | \
          while read run_id; do
            if [ ! -z "$run_id" ]; then
              curl -s -X DELETE -H "Authorization: token $GITHUB_TOKEN" \
                   "https://api.github.com/repos/${{ github.repository }}/actions/runs/$run_id" >/dev/null 2>&1
              echo "Deleted run: $run_id"
            fi
          done
          
          echo "Cleanup completed"
